{"version":3,"sources":["data/db/tokenizationUtils.js","data/db/queryFunctions.js","data/searchContext.js","data/db/dexiewDB.js","data/db/dbContext.dexie.js","data/classes/classContext.js","data/classes/classRibbon.js","data/components/example.js","data/components/exampleList.js","layout/Appbar.js","data/components/searchBar.js","data/components/input/fileInput.js","data/components/input/inputDialog.js","data/components/input/resetDBModal.js","layout/drawerItems.js","layout/drawer.js","App.js","serviceWorker.js","index.js"],"names":["getTrigrams","text","trigrams","Set","end","length","add","slice","Array","from","searchForTrigram","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","trigram","docIds","keys","_args","arguments","wrap","_context","prev","next","undefined","postingsTable","where","between","Dexie","minKey","maxKey","primaryKeys","sent","anyOf","map","docId","abrupt","reduce","_ref2","_ref3","slicedToArray","push","stop","_x","apply","this","sortTrigramsByDF","dfTable","sortBy","searchForTrigrams","_ref4","_callee2","previousTrigramCount","_args2","_context2","x","shift","_x2","LABEL_FILTER_OPTIONS","SearchContextType","React","createContext","SearchContext","props","db","useDB","_React$useState","useState","allDocs","_React$useState2","examples","setExamples","_React$useState3","_React$useState4","lastQuery","setlastQuery","_React$useState5","_React$useState6","searching","setSearching","_React$useState7","_React$useState8","labelFilter","setLabelFilter","useEffect","handleQueryChange","step","query","searchFunction","regexSearch","search","then","results","react_default","createElement","Provider","value","children","useSearch","useContext","hash","require","DF_SCHEMA","stores","version","_createTransaction","override","createTransaction","mode","storeNames","dbSchema","indexOf","call","hook","primKey","obj","trans","_lock","onsuccess","trigramCounts","key","getTrigramsCount","content","entries","forEach","freq","get","item","catch","e","ConstraintError","update","_unlock","onerror","open","initializeDB","dataTable","addData","data","index","remaining","bulkAdd","res","console","log","params","candidateDocIds","terms","result","idsToExclude","idsToGet","toCollection","t0","id","t1","t2","filter","has","Error","_x3","pattern","regex","RegExp","doc","test","matchingDocumentIds","queryCacheObject","Promise","resolve","addSchemaClass","name","color","getSchemaClasses","toArray","DBContextType","DBContext","setStep","ready","setReady","incrementStep","api","addDoc","addDocsBatch","_addDocsBatch","docs","dbUtils","updateDoc","setDocCLass","exampleId","className","human_label","has_label","updateDocsBatch","_search","_regexSearch","_callee3","_context3","_x4","getDocumentById","limit","randomMC","ClassContextType","ClassContext","classes","setClasses","addClass","getColor","values","useClassContext","AddClassDialog","classContext","setName","setOpen","Fragment","Add","onClick","Dialog","onClose","DialogTitle","DialogContent","TextField","onChange","target","label","DialogActions","Button","variant","disabled","ClassRibbon","Grid","container","spacing","cls","example","handleUpdateExample","style","borderColor","background","useStyles","makeStyles","theme","root","overflow","marginTop","Example","setExample","setLoading","loadExample","onLoad","_unused","error","height","CircularProgress","Paper","maxHeight","CardHeader","paddingBottom","title","subheader","classRibbon_ClassRibbon","CardContent","Typography","whiteSpace","CardActions","&:focus","outline","&::-webkit-scrollbar","display","ExampleList","setHeight","width","setWidth","cache","useMemo","CellMeasurerCache","defaultHeight","fixedWidth","ref","useCallback","node","clientHeight","clientWidth","exampleIds","LinearProgress","Container","position","alignItems","justify","es","deferredMeasurementCache","rowHeight","rowRenderer","isScrolling","parent","columnIndex","rowIndex","measure","xs","objectSpread","example_Example","extraStyle","orderIndex","anno_source","schema","rowCount","flexGrow","menuButton","marginRight","bigAvatar","margin","YLabelAppbar","AppBar","rootClass","Toolbar","align","RegexIcon","SvgIcon","d","SearchBar","doRegex","setDoRegex","_useDebouncedCallback","useDebouncedCallback","debouncedCallback","FormControl","InputLabel","htmlFor","Input","type","endAdornment","InputAdornment","IconButton","aria-label","searchBar_RegexIcon","FormHelperText","ToggleButtonGroup","exclusive","v","size","ToggleButton","readJSONFileAsync","file","reject","reader","FileReader","onload","readAsText","FileInput","handleNewFile","extra","contents","_data","files","endsWith","JSON","parse","handleNewData","Papa","header","helperText","DataIngestor","setData","setKeys","textField","setTextField","loading","fileInput_FileInput","Fade","in","select","MenuItem","formtedData","DataInputDialog","fileInput_DataIngestor","ResetDBModal","erasing","setErasing","handleClick","all","clear","DeleteForever","DataItems","ListItem","button","ListItemIcon","Save","ListItemText","primary","ExpandLess","ExpandMore","Collapse","timeoute","unmountOnExit","List","inputDialog_DataInputDialog","resetDBModal_ResetDBModal","DrawerItems","drawerItems_DataItems","classRibbon_AddClassDialog","drawer","defineProperty","breakpoints","up","flexShrink","appBar","marginLeft","concat","toolbar","mixins","drawerPaper","padding","ResponsiveDrawer","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","CardMedia","paddingTop","image","process","Divider","searchBar_SearchBar","drawerItems_DrawerItems","Appbar_YLabelAppbar","Hidden","smUp","implementation","Drawer","anchor","direction","paper","ModalProps","keepMounted","xsDown","App","classContext_ClassContext","dbContext_dexie_DBContext","searchContext_SearchContext","CssBaseline","drawer_ResponsiveDrawer","exampleList_ExampleList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.752ca64c.chunk.js","sourcesContent":["export const getTrigrams =(text)=>{\n    let trigrams = new Set()\n    for (let end=2; end <text.length; end++){\n        trigrams.add(text.slice(end-2,end+1))\n    }\n    return Array.from(trigrams)\n\n}\n\nexport const getTrigramsCount =(text)=>{\n    let trigrams = {}\n    for (let end=2; end <text.length; end++){\n        const key = text.slice(end-2,end+1)\n        trigrams[key] = trigrams[key] ? trigrams[key] +1 : 1\n    }\n    return trigrams\n\n}\n","import { postingsTable, dfTable } from \"./dexiewDB\";\nimport Dexie from \"dexie\";\n/**\n * Searches the postings index for a trigram, possibly restricted to a set of document ids.  \n * @param  {} trigram The trigram we are searcging for\n * @param  {} docIds=[] Possible list of document ids to restrict the search to. \n * @return {Promise<docIds>} a promise with the list of matching document ids\n */\nexport const searchForTrigram = async (trigram,docIds=[])=>{\n    /*\n        Given a trigram and \n    */\n    let keys ;\n    if (docIds.length===0){\n        //If only a trigram was provided\n        keys = await postingsTable.where(`[trigram+docId]`)\n        .between(\n            [trigram,Dexie.minKey],\n            [trigram,Dexie.maxKey],\n        ).primaryKeys()\n    }else{\n        keys = await postingsTable.where(`[trigram+docId]`)\n        .anyOf(docIds.map(docId=>[trigram,docId]))\n        .primaryKeys()\n    }\n    \n    //Keys is an array of primary keys of the posting table. The PK is [term,docId]\n    // Since we searched for one trigram, each docId is unique, so it's enough to reduce \n    return keys.reduce((docIds,[term,docId])=>{\n        docIds.push(docId)\n        return docIds\n    },[]);\n\n}\n/**\n * Gets a list of trigrams and returns them sorted by document frequency. \n * @param  {} trigrams An array of trigrams\n * @returns  {Promise<dfs>} a promise with any trigrams in the index sorted by frequency in ascending orrder\n */\nexport const  sortTrigramsByDF =(trigrams)=>{\n    return dfTable.where(\"trigram\").anyOf(trigrams).sortBy(\"freq\")\n\n}\n/**\n *  Gets a list of trigrams and returns all document ids that contain all of the documents. \n * This function does a few fancy things \n * First it sorts the trigrams by their document frequency.\n * Then it queries for document idS for each trigram, starting with the least frequent trigram. \n * Each time, it restricts the search to the document ids that satisifed the previous query. \n * I got the idea from this paper (http://lintool.github.io/JScene/index.html)\n * \n * You can start the function off with a list of document ids, e.g. to refine a pre-existing search. \n * A use case is to first get the list of unlabeled document ids and then search only over it. \n * @param  {} trigrams\n * @param  {} docIds=[]\n */\nexport const  searchForTrigrams = async (trigrams,docIds=[]) =>{\n\n    \n    //We just started, sort the trigrams by df so that we query by least frequent. \n    const previousTrigramCount = trigrams.length\n    trigrams = await sortTrigramsByDF(trigrams)\n    trigrams = trigrams.map(x=>x.trigram);\n    if (trigrams.length < previousTrigramCount || trigrams.length ===0){\n        // In this case, one or more of the trigrams was not in the index, so return [] without searching\n        return []\n\n    }\n    do {\n        // Keep narrowing down the list until we are out of trigrams or the list of document ids is empty (which means there is no match)\n        const trigram = trigrams.shift();\n        docIds = await searchForTrigram(trigram,docIds)\n    } while (docIds.length>0 && trigrams.length >0)\n    \n    return docIds;\n    \n\n}","import React from 'react'\nimport { useDB } from './db/dbContext.dexie';\n\nexport const LABEL_FILTER_OPTIONS = {\n    ALL:'ALL',\n    LABELED:'LABELED',\n    UNLABELED:'UNLLABELED'\n}\n\nconst SearchContextType = React.createContext('searchContext')\nexport const SearchContext = (props)=>{\n    const db = useDB();\n    const [examples,setExamples] = React.useState(db.allDocs())\n    const [lastQuery,setlastQuery] = React.useState(null);\n    const [searching,setSearching] = React.useState(false)\n    const [labelFilter,setLabelFilter] = React.useState(LABEL_FILTER_OPTIONS.ALL)\n\n\n    React.useEffect(()=>{\n        // This runs the last query when something happens in the db. \n        // E.g. if we apply a class we refresh the data\n        // Lots of potential for UX bugs\n        //TODO improve this\n        handleQueryChange(lastQuery)\n    },[db.step,labelFilter])\n    const handleQueryChange = (query,regex=false)=>{\n        \n        const searchFunction = regex ? db.regexSearch : db.search\n        if (!query || query.length <1){\n            db.search(null,{labelFilter}).then(results=>{\n\n                setExamples(results)\n            })\n            \n        }else{\n            setSearching(true)\n            searchFunction(query,{labelFilter}).then(results=>{\n                setExamples(results);\n                setSearching(false)\n    \n            })\n\n    \n        }\n        setlastQuery(query)\n    }\n\n\n    \n    return (\n        <SearchContextType.Provider value={{examples,handleQueryChange,searching,labelFilter,setLabelFilter:setLabelFilter}}>\n            {props.children}\n        </SearchContextType.Provider>\n    )\n}\n\nexport const useSearch =()=>{\n    return  React.useContext(SearchContextType)\n}","//From https://raw.githubusercontent.com/dfahlander/Dexie.js/master/samples/full-text-search/FullTextSearch.js\n\n/*\n    This example is a simple implementation of full-text search based on multi-valued indexes and Dexie hooks.\n    NOTE: Multi-valued indexes are only supported in Opera, Firefox and Chrome. Does not work with IE so far.\n    To see an example that works with IE, see FullTextSearch2.js.\n*/\nimport Dexie from 'dexie'\nimport { getTrigrams, getTrigramsCount } from './tokenizationUtils';\nimport { searchForTrigrams } from './queryFunctions';\nimport { LABEL_FILTER_OPTIONS } from '../searchContext';\nvar hash = require('object-hash');\n\nconst DBNAME = 'DATA'\nexport const DATA_SCHEMA = 'data'\nexport const POSTINGS_SCHEMA = 'positings'\nexport const DF_SCHEMA = 'document_frequency'; // Stores how many documents each trigram appeared in \nconst CLASS_SCHEMA = 'schema'\nconst QUERY_SCHEMA = 'query'\nvar db = new Dexie(DBNAME);\nconst stores = {}\nstores[POSTINGS_SCHEMA] = \"[trigram+docId]\" // term,doc_id, frequency\n\nstores[DATA_SCHEMA] = \"++id,human_label,model_label,[has_label+id]\" // and content,class\n\nstores[CLASS_SCHEMA] = \"++id,name\"\nstores[QUERY_SCHEMA] = \"++id,*docIds\"\nstores[DF_SCHEMA] =\"trigram,[trigram+freq]\" // compund index lets us filter and sort for least frequent df\n\n\n\n\nconst initializeDB = () => {\n    db.version(1).stores(stores);\n    const initializeDataDB = () => {\n\n        db._createTransaction = Dexie.override(db._createTransaction, function (createTransaction) {\n            // Override db._createTransaction() to make sure to add postings schema  table to any transaction being modified\n            // If not doing this, error will occur in the hooks unless the application code has included postings schema in the transaction when modifying data table.\n            return function (mode, storeNames, dbSchema) {\n                if (mode === \"readwrite\" && storeNames.indexOf(POSTINGS_SCHEMA) == -1) {\n                    storeNames = storeNames.slice(0); // Clone storeNames before mippling with it.\n                    storeNames.push(POSTINGS_SCHEMA);\n                    storeNames.push(DF_SCHEMA);\n                }\n                return createTransaction.call(this, mode, storeNames, dbSchema);\n            }\n        });\n\n        db[DATA_SCHEMA].hook(\"creating\", function (primKey, obj, trans) {\n            // Must wait till we have the auto-incremented key.\n            trans._lock(); // Lock transaction until we got primary key and added all mappings. App code trying to read from dataTable the line after having added an email must then wait until we are done writing the mappings.\n            this.onsuccess = (docId) => {\n                // Add mappings for all words.\n                const trigramCounts = getTrigramsCount(obj.content)\n                Object.entries(trigramCounts).forEach(([trigram, freq]) => {\n                    db[POSTINGS_SCHEMA].add({ trigram, docId, freq });\n                    db[DF_SCHEMA].get(trigram)\n                    .then(item=>{\n                        // If not found\n                        if (item===undefined){\n                            \n                                db[DF_SCHEMA].add({trigram,freq:1})\n                                .catch(e=>{\n                                    if (e instanceof Dexie.ConstraintError){\n                                        //This is a race condition. The object was created in another transaction.\n                                        // We made make more errors because of this and the count won't be perfect.\n                                        //Anyway, we just do the same thing again, this time it will definetly be there\n                                        db[DF_SCHEMA].get(trigram)\n                                        .then(item=>{db[DF_SCHEMA].update(trigram,{freq:item.freq+1})})\n                                        }\n                                })\n                            }\n                            \n                        else{\n                            //Increment the document frequency by 1\n                            db[DF_SCHEMA].update(trigram,{freq:item.freq+1})\n                        }\n\n\n                    })\n                })\n                trans._unlock();\n            }\n            this.onerror = function () {\n                trans._unlock();\n            }\n        });\n\n\n\n\n\n        // Open database to allow application code using it.\n        db.open();\n\n    }\n    initializeDataDB()\n\n\n}\n\ninitializeDB()\n// Add hooks that will index \"content\" for full-text search:\n\nexport const dataTable = db[DATA_SCHEMA]\nexport const postingsTable = db[POSTINGS_SCHEMA];\nexport const dfTable = db[DF_SCHEMA];\n\nexport const addData = async (data,index=0) => {\n    const step =5\n    if (data.length <=0){\n        return;\n    }\n    const slice = data.slice(0,step);\n    const remaining =data.slice(step,data.length);\n\n    return   db[DATA_SCHEMA].bulkAdd(slice,)\n        .then((res)=>{\n            console.log(slice);\n            return addData(remaining,index+step);\n        })\n    }\n\n\nexport const search = async (query,params) => {\n    let candidateDocIds\n    if (query===undefined || query===null || query.length===0){\n         candidateDocIds = await dataTable.toCollection().primaryKeys()\n    }else{\n        const   terms = getTrigrams(query)\n         candidateDocIds = await searchForTrigrams(terms);\n    }\n    let result\n    switch (params.labelFilter){\n        case LABEL_FILTER_OPTIONS.ALL:\n        result= dataTable.where(\"id\").anyOf(candidateDocIds)\n        break;\n        case LABEL_FILTER_OPTIONS.LABELED:\n        result= dataTable.where('[has_label+id]').anyOf(candidateDocIds.map(id=>[1,id]))\n        break;\n        case LABEL_FILTER_OPTIONS.UNLABELED:\n            \n            const idsToExclude =  new Set(await dataTable.where('[has_label+id]').anyOf(candidateDocIds.map(id=>[1,id])).primaryKeys())\n            debugger;\n            const idsToGet = candidateDocIds.filter(x=>!idsToExclude.has(x))\n            result= dataTable.where(\"id\").anyOf(idsToGet)\n            break\n\n        default: \n            throw new Error(params.labelFilter)\n    }\n\n    if (query && query.length>0){\n        return result.filter(x=>x.content.search(query) !=-1).primaryKeys()\n    }else{\n        return result.primaryKeys()\n    }\n    \n    // Finnaly, filter to find the exact query\n\n\n}\n\nexport const regexSearch = (pattern) => {\n\n    try {\n        //temp try catch block to avoid execptions when partial pattern is sent\n\n\n        const regex = new RegExp(pattern)\n        return db[DATA_SCHEMA].filter(doc => regex.test(doc.content)).primaryKeys()\n            .then(matchingDocumentIds => {\n                const queryCacheObject = {\n                    \"id\": hash(pattern),\n                    docIds: matchingDocumentIds\n                }\n                db[QUERY_SCHEMA].add(queryCacheObject)\n                return matchingDocumentIds\n            })\n    }\n    catch (e) {\n        return Dexie.Promise.resolve([])\n    }\n\n}\n\nexport const first = (n = 20) => {\n    return db[DATA_SCHEMA].limit(100).primaryKeys()\n}\nexport const resetAll = () => {\n    return Dexie.Promise.all([\n        db[DATA_SCHEMA].clear(),\n        db[CLASS_SCHEMA].clear()\n    ])\n}\n\nexport const getDocById = (id) => {\n    return db[DATA_SCHEMA].get(id)\n}\nexport const addSchemaClass = (name, color, ) => {\n\n    return db[CLASS_SCHEMA].add({ name, color })\n}\n\nexport const getSchemaClasses = () => {\n    return db[CLASS_SCHEMA].toArray()\n}\n\nexport const applyClassToExample = (exampleId, className) => {\n    return db[DATA_SCHEMA].update(exampleId, { human_label: className, has_label: 1 })\n}\n\nexport const getExampleCount = () =>dataTable.count()","import React from 'react'\nimport * as dbUtils from './dexiewDB'\n\nconst DBContextType = React.createContext(\"dbContext\");\n\nexport const DBContext = (props)=>{\n    const [step,setStep] = React.useState(0)\n    const [ready,setReady] = React.useState(false)\n\n    const incrementStep = ()=>setStep(step+1) // trigger a rerender when modifying the db\n    const init =  ()=>{\n\n        setReady(true)\n    \n    }\n    React.useEffect(init,[1])\n\n    const api = {\n        addDoc: (doc)=>{\n            // dbUtils.addDoc(doc)\n            incrementStep();\n        },\n        addDocsBatch: async (docs)=>{\n            const result = await dbUtils.addData(docs)\n            return result\n        },\n        updateDoc:(doc)=>{\n            // dbUtils.updateDoc(doc)\n            incrementStep();\n        },\n        setDocCLass: (exampleId,className)=>{\n            return dbUtils.applyClassToExample(exampleId,className)\n            \n        },\n        updateDocsBatch:(docs)=>{\n            // for (const doc of docs){\n            //     // dbRef.current.updateDoc(doc)\n            // }\n            incrementStep();\n        },\n        search:  async (query,params)=>{\n            const results = await dbUtils.search(query,params)\n            return  results\n        },\n        regexSearch:  async (pattern,)=>{\n            const results = await dbUtils.regexSearch(pattern)\n            return  results\n        },\n\n        getDocumentById: (id)=>{\n            return dbUtils.getDocById(id)\n        },\n\n        allDocs:()=>{\n\n            return dbUtils.first(20)\n        },\n        step\n\n    }\n    return (\n        <DBContextType.Provider value={api}>\n            {ready ? props.children : null}\n        </DBContextType.Provider>\n    )\n}\n\nexport const useDB = ()=>{\n    const context = React.useContext(DBContextType)\n    return context;\n}","import React from 'react'\nimport { addSchemaClass, getSchemaClasses } from '../db/dexiewDB';\n\nvar randomMC = require('random-material-color');\n\nconst ClassContextType = React.createContext('classContext')\nexport const ClassContext = (props)=>{\n\n\n    const [classes,setClasses] = React.useState({});\n    React.useEffect( ()=>{\n        getSchemaClasses().then(classes=>{\n            setClasses(classes);\n\n        })\n\n    },[1])\n    \n    const addClass = async (name,)=>{\n        const color =randomMC.getColor({text:name});\n        await addSchemaClass(name,color)\n        const classes =await getSchemaClasses()\n        setClasses(classes);\n    }\n\n    return (\n        <ClassContextType.Provider value ={{classes:Object.values(classes),addClass}}>\n            {props.children}\n        </ClassContextType.Provider>\n    )\n}\n\nexport const useClassContext = ()=>{\n    return React.useContext(ClassContextType)\n}","import React from 'react'\nimport { useClassContext } from './classContext';\nimport { Grid, Button,  Dialog, DialogTitle, DialogContent, TextField, DialogActions } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\nimport { useDB } from '../db/dbContext.dexie';\n\nexport const AddClassDialog = (props)=>{\n    const classContext =useClassContext()\n    const [name,setName] = React.useState(null)\n    const [open,setOpen] = React.useState(false);\n\n    return (\n        <React.Fragment>\n            <Add onClick={()=>setOpen(true)}/>\n\n        <Dialog open={open} onClose={()=>setOpen(false)}>\n            <DialogTitle>\n                Add a new class\n            </DialogTitle>\n            <DialogContent>\n                <TextField \n                    onChange={e=>setName(e.target.value)}\n                    value={name}\n                    label=\"Choose a name for your class\"\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button \n                variant=\"contained\" \n                color=\"primary\" \n                disabled={name===null} \n                onClick={()=>{\n                    classContext.addClass(name)\n                    setOpen(false)\n                    setName(null)\n                \n                }}\n                >\n                Add {name}\n                </Button>\n            </DialogActions>\n        </Dialog>\n        </React.Fragment>\n    )\n}\nexport const ClassRibbon = (props)=>{\n    const db = useDB()\n    const classContext =useClassContext()\n    const applyClass =(name)=>{\n        db.setDocCLass(props.example.id,name)\n        .then(props.handleUpdateExample)\n\n    }\n    return(\n    <Grid container spacing={2}>\n        \n        {classContext.classes.map(cls=>(\n            <Grid item>\n            <Button \n                variant={props.example.human_label===cls.name ? \"contained\" : \"outlined\"}\n                onClick={()=>{applyClass(cls.name)}}\n                style={{borderColor:cls.color,background:props.example.human_label===cls.name ? cls.color : undefined}}>\n                {cls.name}\n            </Button>\n            </Grid>\n        ))}\n    </Grid>\n)\n}","import React from 'react'\nimport { Typography, Paper, CardHeader, CardContent, CardActions, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { ClassRibbon } from '../classes/classRibbon';\nimport { useDB } from '../db/dbContext.dexie';\nconst useStyles = makeStyles(theme => ({\n    root: {\n        overflow: 'auto',\n        marginTop: '1rem'\n    }\n}))\n\nexport const Example = (props) => {\n    const classes = useStyles()\n    const db = useDB()\n    const [example, setExample] = React.useState(null)\n    const [loading, setLoading] = React.useState(false);\n    const loadExample = ()=>{\n\n\n        db.getDocumentById(props.exampleId)\n            .then((example) => {\n                setExample(example);\n                setLoading(false);\n\n                try{\n                    props.onLoad();\n                }\n                catch  {\n                    console.error(\"Node was unmounted before loading\")\n                }\n             \n    })\n}\n    React.useEffect(()=>{\n                setLoading(true)\n        loadExample()\n    }\n        ,[1]);\n\n    if ( example===null ){\n        return (\n        <div style={{height:'50vh'}}>\n        <CircularProgress />\n        </div>\n        )\n        \n    }\n    return (\n        <div>\n            <Paper className={classes.root} id={props.exampleId} style={{ maxHeight: '80vh' }}>\n                <CardHeader\n                    style={{ paddingBottom: '1rem' }}\n                    title={props.exampleId}\n                    subheader={<ClassRibbon example={example} handleUpdateExample={loadExample} />}\n                ></CardHeader>\n                <CardContent style={{ overflow: 'auto', height: '75%' }}>\n                    <Typography style={{ whiteSpace: 'pre-line', }}>\n                        {example.content}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n\n                </CardActions>\n            </Paper>\n        </div>\n    )\n}","/*\n    This is the grossest part of the code. \n    We're solving two problems here\n    1. The number of examples froma  query is unbounded, so we are potentially rendering A LOT of things and that can lead to performance degradation\n    2. The length of the text in each result is unkown and unbounded, but we want don't want the user to have to scroll forever to get through an example. \n\n    We're using react-virtualized to solve both, since that's what it does. It's just very strange for the uninitiated, hence this long comment. \n\n    Basically, RV manages mounting and unmounting compenents for us, so at any given time only a few are actually in the DOM. We use it's CellMeasurer\n    component to figure out how high each example should be. \n\n    When a user is scrolling within a query result, we want to cache the height, so we use it's measure cache, but if the query changes the cache \n    is no longer valid, since it uses the index in the array of examples which changes. To solve that, we memoize the cache based on the example list. \n\n    It's not deep, but it's complex and makes a difference for the user\n*/\nimport React from 'react'\nimport { makeStyles, Grid, Container, CircularProgress, LinearProgress,  } from '@material-ui/core';\nimport { CellMeasurer, CellMeasurerCache, List } from 'react-virtualized';\nimport { Example } from './example';\nimport { useSearch } from '../searchContext';\n  \nconst useStyles = makeStyles(theme => ({\n    root: {\n        '&:focus': {\n            outline: 0\n        },\n\n        '&::-webkit-scrollbar': {\n            display: 'hidden'\n        }\n\n    }\n}))\nexport const ExampleList = (props) => {\n    const [height, setHeight] = React.useState(0);\n    const [width, setWidth] = React.useState(0);\n    const search = useSearch()\n\n    const cache = React.useMemo(()=>{\n        /* This is where we memoize the cache based on the given set of examples */\n        return  new CellMeasurerCache({\n            defaultHeight: 50,\n            fixedWidth: true\n          });\n        \n    },[search.examples])\n    const ref = React.useCallback(node => {\n        if (node !== null && height === 0) {\n            /*\n                Measure the height of the element that contains the list so we know how much space we have\n                TODO - Make this responsive, e.g. if the user resized the screen adjust. \n            */\n            setHeight(node.clientHeight);\n            setWidth(node.clientWidth);\n        }\n    })\n    const exampleIds = search.examples;\n\n\n\n    const exampleRenderer = ({  index, isScrolling, key, parent, style  }) => {\n        /*\n            This function renderes each example in the list. RV calls it when the item is about to come into view\n        */\n        const exampleId = exampleIds[index]\n        return (\n            <CellMeasurer\n            cache={cache}\n            columnIndex={0}\n            key={key}\n            parent={parent}\n            rowIndex={index}\n          >\n            {({ measure }) => ( // Measure is called by the example one it has retreived the example from the DB so that it's size is set\n\n            <Grid item xs={10} style={{ ...style,  }} key={key} >\n                <Example\n                    handleUpdateExample={props.handleUpdateExample}\n                    extraStyle={{ style }}\n                    orderIndex={1}\n                    key={exampleId}\n                    exampleId={exampleId}\n                    anno_source={props.anno_source}\n                    schema={props.schema}\n                    onLoad={measure}\n\n                />\n\n            </Grid>\n            )\n            }\n            </CellMeasurer>\n\n\n        )\n    }\n    const classes = useStyles()\n    if (search.searching){\n        return <LinearProgress />\n    }\n    return (\n        <Container style={{height:'86vh',marginTop:'2rem'}}>\n        <div className={classes.root} style={{ position: 'relative', height: '100%', width:'100%', overflow: 'hidden' }} ref={ref}>\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <List //This is the list of items \n                height={height}\n                deferredMeasurementCache={cache}\n                rowHeight={cache.rowHeight}\n                rowRenderer={exampleRenderer}\n                width={width}\n                rowCount={exampleIds.length}\n            />\n            </Grid>\n        </div>\n        </Container>\n    )\n}\n\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  bigAvatar: {\n    margin: 10,\n    width: 120,\n    height: 60,\n  },\n\n}));\n\nexport const YLabelAppbar =(props) => {\n  const classes = useStyles();\n\n  return (\n      <AppBar position=\"fixed\" className={props.rootClass}>\n\n      \n        <Toolbar>\n\n          <Typography align=\"left\" variant=\"h6\" className={classes.title}>\n            Why Label When You Can Search ? \n          </Typography>\n\n        </Toolbar>\n      </AppBar>\n  );\n}\n","import React from 'react'\nimport {  LinearProgress, FormControl, InputLabel, Input, InputAdornment, IconButton, FormHelperText, SvgIcon, Grid, Typography } from '@material-ui/core';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\n\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSearch, LABEL_FILTER_OPTIONS } from '../searchContext';\nconst RegexIcon = (props)=>(\n    <SvgIcon {...props}>\n        <g id=\"regular-expression\">\n\t\t<path id=\"left-bracket\" d=\"M3 12.045c0-.99.15-1.915.45-2.777A6.886 6.886 0 0 1 4.764 7H6.23a7.923 7.923 0 0 0-1.25 2.374 8.563 8.563 0 0 0 .007 5.314c.29.85.7 1.622 1.23 2.312h-1.45a6.53 6.53 0 0 1-1.314-2.223 8.126 8.126 0 0 1-.45-2.732\"/>\n\t\t<path id=\"dot\" d=\"M10 16a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"/>\n\t\t<path id=\"star\" d=\"M14.25 7.013l-.24 2.156 2.187-.61.193 1.47-1.992.14 1.307 1.74-1.33.71-.914-1.833-.8 1.822-1.38-.698 1.296-1.74-1.98-.152.23-1.464 2.14.61-.24-2.158h1.534\"/>\n\t\t<path id=\"right-bracket\" d=\"M21 12.045c0 .982-.152 1.896-.457 2.744A6.51 6.51 0 0 1 19.236 17h-1.453a8.017 8.017 0 0 0 1.225-2.31c.29-.855.434-1.74.434-2.66 0-.91-.14-1.797-.422-2.66a7.913 7.913 0 0 0-1.248-2.374h1.465a6.764 6.764 0 0 1 1.313 2.28c.3.86.45 1.782.45 2.764\"/>\n\t</g>\n\n    </SvgIcon>\n)\nexport const SearchBar = (props)=>{\n    const [doRegex,setDoRegex] = React.useState(false)\n    const search = useSearch()\n    const [debouncedCallback] = useDebouncedCallback(\n        // function\n        (query) => {\n            search.handleQueryChange(query,doRegex)\n        },\n        // delay in ms\n        250\n      );\n    \n    return (\n        <Grid container>\n        <Grid item xs={12}>\n        <FormControl >\n        <InputLabel htmlFor=\"searchbar\">Search for something</InputLabel>\n        <Input\n          id=\"searchbar\"\n          type=\"text\"\n          \n          onChange={e=>debouncedCallback(e.target.value)}\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <IconButton aria-label=\"Toggle regex\" onClick={()=>{setDoRegex(!doRegex)}} color={doRegex ? \"primary\" :undefined} >\n                <RegexIcon/>\n              </IconButton>\n            </InputAdornment>\n          }\n        />\n                <FormHelperText id=\"weight-helper-text\">{search.searching ? <LinearProgress /> : \"Runs a full text search on your data\"}</FormHelperText>\n\n      </FormControl>\n      </Grid>\n      <Grid item xs={12} style={{marginTop:'1rem'}}>\n          <ToggleButtonGroup exclusive value={search.labelFilter} onChange={(e,v)=>search.setLabelFilter(v)} size=\"small\">\n          <ToggleButton value={LABEL_FILTER_OPTIONS.ALL} >\n              All\n            </ToggleButton>\n            <ToggleButton value={LABEL_FILTER_OPTIONS.LABELED} size=\"small\">\n              Done\n            </ToggleButton>\n            <ToggleButton value={LABEL_FILTER_OPTIONS.UNLABELED} size=\"small\">\n              Empty\n            </ToggleButton>\n\n          </ToggleButtonGroup>\n        <Grid item xs={12}>\n          <Typography>\n              {search.examples.length} examples in group\n          </Typography>\n        </Grid>\n      </Grid>\n      </Grid>\n\n    )\n}","import React from 'react'\nimport { TextField, Fade, MenuItem,  Button, CircularProgress } from '@material-ui/core';\n\nimport { useDB } from '../../db/dbContext.dexie';\nimport Papa from 'papaparse'\nexport function readJSONFileAsync(file) {\n    return new Promise((resolve, reject) => {\n        let reader = new FileReader();\n\n        reader.onload = () => {\n            resolve(reader.result);\n        };\n\n        reader.onerror = reject;\n\n        reader.readAsText(file);\n    })\n}\n\n\nexport const FileInput = (props) => {\n    const handleNewFile = async (e, extra) => {\n        //Todo move this to a webworker (requires ejecting https://github.com/developit/workerize-loader/issues/35)\n        const file = e.target.files[0]\n        const contents = await readJSONFileAsync(file);\n        if (file.name.endsWith('.json')){\n            const data = JSON.parse(contents);\n            props.handleNewData(data);\n    \n        }else{\n            const data = Papa.parse(contents,{\n                header:true\n            }).data;\n            props.handleNewData(data);\n        }\n    }\n    return (\n        <TextField\n            type=\"file\"\n            label=\"Add a file\"\n            onChange={handleNewFile}\n            helperText=\"Select a file\"\n        />\n    )\n}\n\n\nexport const DataIngestor = (props) => {\n    const [data, setData] = React.useState(null)\n    const [keys, setKeys] = React.useState([]);\n    const [textField, setTextField] = React.useState(null)\n    const [loading,setLoading] = React.useState(false)\n    const db = useDB()\n    const handleNewData = (data) => {\n        setKeys(Object.keys(data[0]));\n        setData(data);\n    }\n\n    const handleSubmit = () => {\n        setLoading(true)\n        const formtedData = data.map((x, id) => ({\n            content: x[textField]\n        }))\n        db.addDocsBatch(formtedData)\n        .then(()=>setLoading(false))\n        ;\n    }\n    return (\n        <form>\n            <FileInput handleNewData={handleNewData} />\n            <Fade in={keys.length}>\n                <TextField\n                    onChange={e => setTextField(e.target.value)}\n                    value={textField}\n\n                    select\n                    label=\"Text Field\"\n                    helperText=\"Please select the field in the data we'll be labeling\"\n                    margin=\"normal\"\n                >\n\n                    {keys.map(x => (\n                        <MenuItem value={x}>{x}</MenuItem>\n                    ))}\n                </TextField>\n            </Fade>\n            {loading ? <CircularProgress /> : \n            <Button\n                onClick={handleSubmit}\n                disabled={textField === null}\n                variant=\"outlined\"\n                color=\"primary\"\n            >\n                Load Data\n                </Button>\n            }\n        </form>\n    )\n}","import React from 'react'\nimport { DialogTitle, Dialog, DialogContent, IconButton,  } from '@material-ui/core';\nimport { DataIngestor } from './fileInput';\nimport { Add } from '@material-ui/icons';\nexport const DataInputDialog = (props) => {\n\n    const [open, setOpen] = React.useState(false);\n    return (\n        <React.Fragment>\n            <IconButton color=\"inherit\" onClick={() => setOpen(true)}>\n                <Add />\n            </IconButton>\n            <Dialog open={open} onClose={() => setOpen(false)}>\n                <DialogTitle>Add some data</DialogTitle>\n                <DialogContent>\n                    <DataIngestor />\n                </DialogContent>\n            </Dialog>\n        </React.Fragment>\n    )\n}","import React from 'react'\nimport {  DialogTitle, Dialog, DialogActions, Button, CircularProgress, IconButton } from '@material-ui/core';\nimport { DeleteForever } from '@material-ui/icons';\nimport { resetAll } from '../../db/dexiewDB';\nexport const ResetDBModal =(props)=>{\n    const [open,setOpen] = React.useState(false);\n    const [erasing,setErasing] = React.useState(false)\n    const handleClick = async ()=>{\n        setErasing(true)\n        await resetAll();\n        setOpen(false)\n        setErasing(false)\n    }\n    return (\n        <React.Fragment>\n            <IconButton\n            color='inherit'\n                onClick={()=>setOpen(true)}\n            ><DeleteForever/></IconButton>\n\n            <Dialog open={open} onClose={()=>setOpen(false)}>\n                <DialogTitle>\n                    Erase all the data\n            </DialogTitle>\n            <DialogActions>\n            { erasing ? <CircularProgress /> :\n             <Button onClick={handleClick} variant=\"contained\" color=\"danger\">Yes Erase It</Button> \n            }\n            </DialogActions>\n            </Dialog>\n\n        </React.Fragment>\n    )\n}","import React from 'react'\nimport { List, ListItem, ListItemIcon, ListItemText, Collapse } from '@material-ui/core';\nimport { Save, ExpandLess, ExpandMore,  } from '@material-ui/icons';\nimport { DataInputDialog } from '../data/components/input/inputDialog';\nimport { ResetDBModal } from '../data/components/input/resetDBModal';\nimport { AddClassDialog } from '../data/classes/classRibbon';\nconst DataItems = (props) => {\n    const [open, setOpen] = React.useState(true)\n    return (\n        <React.Fragment>\n            <ListItem button key={\"Data\"} onClick={() => setOpen(!open)}>\n                <ListItemIcon> <Save /></ListItemIcon>\n                <ListItemText primary={\"Data\"} />\n                {open ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={open} timeoute=\"auto\" unmountOnExit>\n                <List>\n                    <ListItem>\n                        <ListItemIcon>\n                            <DataInputDialog />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Add More Data\" />\n                    </ListItem>\n                    <ListItem>\n                        <ListItemIcon>\n                            <ResetDBModal />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Delete All Data\" />\n                    </ListItem>\n\n                </List>\n            </Collapse>\n        </React.Fragment>\n    )\n}\nexport const DrawerItems = (props) => {\n\n    return (\n        <List>\n            <DataItems />\n            <ListItem button>\n                <ListItemIcon>\n                    < AddClassDialog />\n                </ListItemIcon>\n                <ListItemText primary=\"Classes\" />\n            </ListItem>\n\n        </List>\n    )\n\n}","import React from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { YLabelAppbar } from './Appbar';\nimport { SearchBar } from '../data/components/searchBar';\nimport { CardMedia } from '@material-ui/core';\nimport { DrawerItems } from './drawerItems';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    marginLeft: drawerWidth,\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport const  ResponsiveDrawer = (props) => {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  }\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} >\n      <CardMedia\n      style={{paddingTop:'25%'}}\n        image={process.env.PUBLIC_URL + '/img/logo.png'}\n      />\n\n      </div>\n      \n\n      <Divider />\n      <List>\n      \n          <ListItem >\n            <SearchBar />\n          </ListItem>\n      \n      </List>\n      <Divider />\n      <DrawerItems />\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n        <YLabelAppbar handleDrawerToggle={handleDrawerToggle} rootClass={classes.appBar}/>\n      <nav className={classes.drawer} aria-label=\"Mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n            {props.children}\n      </main>\n    </div>\n\n)\n        }","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Container,} from '@material-ui/core'\nimport { DBContext } from './data/db/dbContext.dexie';\nimport { ExampleList, } from './data/components/exampleList';\nimport { ClassContext } from './data/classes/classContext';\nimport { SearchContext } from './data/searchContext';\nimport { ResponsiveDrawer } from './layout/drawer';\n\n\nfunction App() {\n\n  return (\n    <React.Fragment>\n      \n      <ClassContext>\n      <DBContext>\n        <SearchContext>\n      \n            <CssBaseline />\n            <ResponsiveDrawer >\n            <Container>\n\n            \n            \n            <ExampleList />\n            </Container>\n            </ResponsiveDrawer>\n            </SearchContext>\n        </DBContext>\n      </ClassContext>\n      \n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}