{"version":3,"sources":["data/db/tokenizationUtils.js","data/db/queryFunctions.js","data/searchContext.js","data/db/insertionUtils.js","data/db/dexiewDB.js","data/db/dbContext.dexie.js","data/classes/classContext.js","data/classes/classRibbon.js","data/components/example.js","data/components/exampleList.js","layout/Appbar.js","data/components/searchBar.js","data/components/input/fileInput.js","data/components/input/inputDialog.js","data/components/input/resetDBModal.js","layout/drawerItems.js","layout/drawer.js","App.js","serviceWorker.js","index.js"],"names":["getTrigramsCount","text","trigrams","toLowerCase","replace","end","length","key","slice","searchForTrigram","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","trigram","keys","_args","arguments","wrap","_context","prev","next","undefined","postingsTable","get","sent","abrupt","docs","stop","_x","apply","this","sortTrigramsByDF","dfTable","where","anyOf","sortBy","searchForTrigrams","_ref2","_callee2","docIds","previousTrigramCount","first","foundIds","_args2","_context2","map","x","shift","id","foundIdsSet","Set","filter","has","_x2","LABEL_FILTER_OPTIONS","SearchContextType","React","createContext","SearchContext","props","db","useDB","_React$useState","useState","allDocs","_React$useState2","slicedToArray","examples","setExamples","_React$useState3","_React$useState4","lastQuery","setlastQuery","_React$useState5","_React$useState6","searching","setSearching","_React$useState7","_React$useState8","labelFilter","setLabelFilter","useEffect","handleQueryChange","step","query","searchFunction","regexSearch","search","then","results","react_default","createElement","Provider","value","children","useSearch","useContext","enqueTermsToBePosted","termsToBePosted","t1","t2","termsToBePostedArray","i","existingTerms","Date","forEach","doc","trigramCounts","content","entries","_ref3","freq","push","console","log","concat","_ref4","_ref5","newTerm","postingsQueueTable","bulkAdd","primaryKeys","modify","addDocsToStore","_ref6","insertDUration","dataTable","moveNewTermsFromPostingsQueueToPostingsTable","_ref7","_callee4","collection","terms","_context4","equals","limit","toArray","transaction","DF_SCHEMA","POSTING_QUEUE_SCHEMA","POSTINGS_SCHEMA","_ref8","_callee3","tx","_context3","delete","_x4","_x3","getTermsMap","reduce","termObj","appendDocsFromQueueToExistingPostingsItems","_ref10","_callee7","termsMap","termKeys","_context7","_ref11","_callee6","_context6","posting","newDocIds","df","_x7","count","t0","_x6","hash","require","Dexie","stores","version","open","initializeDB","addData","data","params","candidateDocIds","result","idsToExclude","idsToGet","toCollection","Error","pattern","regex","RegExp","test","matchingDocumentIds","queryCacheObject","add","e","Promise","resolve","addSchemaClass","name","color","getSchemaClasses","DBContextType","DBContext","setStep","ready","setReady","incrementStep","api","addDoc","addDocsBatch","_addDocsBatch","dbUtils","updateDoc","setDocCLass","exampleId","className","update","human_label","has_label","updateDocsBatch","_search","_regexSearch","getDocumentById","randomMC","ClassContextType","ClassContext","classes","setClasses","addClass","getColor","values","useClassContext","AddClassDialog","classContext","setName","setOpen","Fragment","Add","onClick","Dialog","onClose","DialogTitle","DialogContent","TextField","onChange","target","label","DialogActions","Button","variant","disabled","ClassRibbon","Grid","container","spacing","cls","item","example","handleUpdateExample","style","borderColor","background","useStyles","makeStyles","theme","root","overflow","marginTop","Example","setExample","setLoading","loadExample","onLoad","_unused","error","height","CircularProgress","Paper","maxHeight","CardHeader","paddingBottom","title","subheader","classRibbon_ClassRibbon","CardContent","Typography","whiteSpace","CardActions","&:focus","outline","&::-webkit-scrollbar","display","ExampleList","setHeight","width","setWidth","cache","useMemo","CellMeasurerCache","defaultHeight","fixedWidth","ref","useCallback","node","clientHeight","clientWidth","exampleIds","LinearProgress","Container","position","alignItems","justify","es","deferredMeasurementCache","rowHeight","rowRenderer","index","isScrolling","parent","columnIndex","rowIndex","measure","xs","objectSpread","example_Example","extraStyle","orderIndex","anno_source","schema","rowCount","flexGrow","menuButton","marginRight","bigAvatar","margin","YLabelAppbar","AppBar","rootClass","Toolbar","align","RegexIcon","SvgIcon","d","SearchBar","doRegex","setDoRegex","_useDebouncedCallback","useDebouncedCallback","debouncedCallback","FormControl","InputLabel","htmlFor","Input","type","endAdornment","InputAdornment","IconButton","aria-label","searchBar_RegexIcon","FormHelperText","ToggleButtonGroup","exclusive","v","size","ToggleButton","uuid","readJSONFileAsync","file","reject","reader","FileReader","onload","onerror","readAsText","FileInput","handleNewFile","extra","contents","_data","files","endsWith","JSON","parse","handleNewData","Papa","header","helperText","DataIngestor","setData","setKeys","textField","setTextField","loading","fileInput_FileInput","Fade","in","select","MenuItem","formtedData","DataInputDialog","fileInput_DataIngestor","ResetDBModal","erasing","setErasing","handleClick","all","clear","DeleteForever","DataItems","ListItem","button","ListItemIcon","Save","ListItemText","primary","ExpandLess","ExpandMore","Collapse","timeoute","unmountOnExit","List","inputDialog_DataInputDialog","resetDBModal_ResetDBModal","DrawerItems","drawerItems_DataItems","classRibbon_AddClassDialog","drawer","defineProperty","breakpoints","up","flexShrink","appBar","marginLeft","toolbar","mixins","drawerPaper","padding","ResponsiveDrawer","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","CardMedia","paddingTop","image","process","Divider","searchBar_SearchBar","drawerItems_DrawerItems","Appbar_YLabelAppbar","Hidden","smUp","implementation","Drawer","anchor","direction","paper","ModalProps","keepMounted","xsDown","App","classContext_ClassContext","dbContext_dexie_DBContext","searchContext_SearchContext","CssBaseline","drawer_ResponsiveDrawer","exampleList_ExampleList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.cb828422.chunk.js","sourcesContent":["export const getTrigrams =(text)=>{\n    let trigrams = new Set()\n    for (let end=2; end <text.length; end++){\n        trigrams.add(text.slice(end-2,end+1))\n    }\n    return Array.from(trigrams)\n\n}\n\nexport const getTrigramsCount =(text)=>{\n    if(!text){\n        return {}\n    }\n    let trigrams = {}\n    text = text.toLowerCase().replace(/[\\s+./:,<>']/g, '')\n    if (!text){\n        return trigrams\n    }\n    for (let end=2; end <text.length; end++){\n        const key = text.slice(end-2,end+1)\n        trigrams[key] = trigrams[key] ? trigrams[key] +1 : 1\n    }\n    return trigrams\n\n}\n","import { postingsTable, dfTable, postingsQueueTable } from \"./dexiewDB\";\nimport Dexie from \"dexie\";\n/**\n * Searches the postings index for a trigram, possibly restricted to a set of document ids.  \n * @param  {} trigram The trigram we are searcging for\n * @param  {} docIds=[] Possible list of document ids to restrict the search to. \n * @return {Promise<docIds>} a promise with the list of matching document ids\n */\nexport const searchForTrigram = async (trigram,docIds=[])=>{\n    /*\n        Given a trigram and \n    */\n    let keys ;\n    \n        //If only a trigram was provided\n        keys = await postingsTable.get(trigram)\n        return keys.docs;\n    \n    //Keys is an array of primary keys of the posting table. The PK is [term,docId]\n    // Since we searched for one trigram, each docId is unique, so it's enough to reduce \n    // return keys.reduce((docIds,[term,docId])=>{\n    //     docIds.push(docId)\n    //     return docIds\n    // },[]);\n\n}\n/**\n * Gets a list of trigrams and returns them sorted by document frequency. \n * @param  {} trigrams An array of trigrams\n * @returns  {Promise<dfs>} a promise with any trigrams in the index sorted by frequency in ascending orrder\n */\nexport const  sortTrigramsByDF =(trigrams)=>{\n    return dfTable.where(\"trigram\").anyOf(trigrams).sortBy(\"freq\")\n\n}\n/**\n *  Gets a list of trigrams and returns all document ids that contain all of the documents. \n * This function does a few fancy things \n * First it sorts the trigrams by their document frequency.\n * Then it queries for document idS for each trigram, starting with the least frequent trigram. \n * Each time, it restricts the search to the document ids that satisifed the previous query. \n * I got the idea from this paper (http://lintool.github.io/JScene/index.html)\n * \n * You can start the function off with a list of document ids, e.g. to refine a pre-existing search. \n * A use case is to first get the list of unlabeled document ids and then search only over it. \n * @param  {} trigrams\n * @param  {} docIds=[]\n */\nexport const  searchForTrigrams = async (trigrams,docIds=[]) =>{\n\n    \n    //We just started, sort the trigrams by df so that we query by least frequent. \n    const previousTrigramCount = trigrams.length\n    trigrams = await sortTrigramsByDF(trigrams)\n    trigrams = trigrams.map(x=>x.trigram);\n    if (trigrams.length < previousTrigramCount || trigrams.length ===0){\n        // In this case, one or more of the trigrams was not in the index, so return [] without searching\n        return []\n\n    }\n    let first = true;\n    do {\n        // Keep narrowing down the list until we are out of trigrams or the list of document ids is empty (which means there is no match)\n        const trigram = trigrams.shift();\n        const foundIds = await searchForTrigram(trigram,docIds)\n        if (first){\n            docIds = foundIds.map(x=>x.id)\n        }else{\n            const foundIdsSet = new Set(foundIds.map(x=>x.id));\n            docIds = docIds.filter(id=>foundIdsSet.has(id));\n        }\n        first=false;\n\n    } while (docIds.length>0 && trigrams.length >0)\n    \n    return docIds;\n    \n\n}","import React from 'react'\nimport { useDB } from './db/dbContext.dexie';\n\nexport const LABEL_FILTER_OPTIONS = {\n    ALL:'ALL',\n    LABELED:'LABELED',\n    UNLABELED:'UNLLABELED'\n}\n\nconst SearchContextType = React.createContext('searchContext')\nexport const SearchContext = (props)=>{\n    const db = useDB();\n    const [examples,setExamples] = React.useState(db.allDocs())\n    const [lastQuery,setlastQuery] = React.useState(null);\n    const [searching,setSearching] = React.useState(false)\n    const [labelFilter,setLabelFilter] = React.useState(LABEL_FILTER_OPTIONS.ALL)\n\n\n    React.useEffect(()=>{\n        // This runs the last query when something happens in the db. \n        // E.g. if we apply a class we refresh the data\n        // Lots of potential for UX bugs\n        //TODO improve this\n        handleQueryChange(lastQuery)\n    },[db.step,labelFilter])\n    const handleQueryChange = (query,regex=false)=>{\n        \n        const searchFunction = regex ? db.regexSearch : db.search\n        if (!query || query.length <1){\n            db.search(null,{labelFilter}).then(results=>{\n\n                setExamples(results)\n            })\n            \n        }else{\n            setSearching(true)\n            searchFunction(query,{labelFilter}).then(results=>{\n                setExamples(results);\n                setSearching(false)\n    \n            })\n\n    \n        }\n        setlastQuery(query)\n    }\n\n\n    \n    return (\n        <SearchContextType.Provider value={{examples,handleQueryChange,searching,labelFilter,setLabelFilter:setLabelFilter}}>\n            {props.children}\n        </SearchContextType.Provider>\n    )\n}\n\nexport const useSearch =()=>{\n    return  React.useContext(SearchContextType)\n}","/*\n    This file contains the logic for adding data to the DB and building out a postings list. \n    It makes more sense if you know the problems we're working around so here goes: \n\n    We need to maintain a map from tokens to document ids\n    We need to maintain another map from tokens to their document frequency\n    We want to do this in a transaction, so that if it fails the user isn't in some undefined state\n    \n    But\n    If you do one transaction that is very big, the browser crashes.\n    Depending on the size of the file, it can get pretty slow pretty fast, so the user is likely to leave\n    We want it to be as fast as possible or at least unslow. \n\n    We need to be able to support new documents, that is update the postings list and df table\n\n    So here's what we do when new documents come in\n    1.1. We insert all of them into the data table in one transaction\n    1.2. Within the same transaction, we calculate all of the trigrams in the set of documents and which docs they map to\n    1.3. We then insert that into the postings_que table. This is done in a series of bulk inserts but within one transaction. \n    1.4. we mark all the items in the postings queue as new\n    1.5. We search the postings table for any of the terms, those that exist in it are marked as existing in the postings queue table\n\n    End of first transaction. Now we need to update the df and postings table\n    This has two parts, inserting new tokens into the df and postings table, and then updating existing tokens \n    This part is slow, so we do it in chunks, isolating each chunk in a transaction. Then we can pick up where we left off. \n    It goes like this\n\n    2.1         Scan the postings queue table for new terms. \n    2.1.1       Split the terms into chunks\n    2.1.2       for each chunk\n    2.1.2.1        open a new transaction\n    2.1.2.2        Insert the terms in the chunk  into the postings table and df table\n    2.1.2.3        delete the terms in the chunk  them from the postings queue table \n    2.1.2.4        end of transaction\n\n    2.2         Scan the postings queue table for existing terms (at this point it should be all that remains there)\n    2.2.1       Split the terms into chunks\n    2.2.2       for each chunk\n    2.2.2.1         open a new transaction\n    2.2.2.2             Update the postings table (in practice we do this we a where clause and modify function) \n    2.2.2.2.1           for each term in the chunk, find it in the postings table\n    2.2.2.2.2               append the docs in the term to the docs already set in the postings table\n    2.2.2.3                 update the df table (in practice we do this we a where clause and modify function) \n    2.2.2.3.1           for each term in the chunk, find it in the df table\n    2.2.2.3.2               set the freq of the item in the df table to be itself + the doc freq of the item in the chunk\n    2.2.2.4             delete the items in the chunk from the postings queue table\n    2.2.2.5         end of transaction\n\n\n    \n*/\n\nimport { dfTable, postingsTable, dataTable, postingsQueueTable, POSTING_QUEUE_SCHEMA, POSTINGS_SCHEMA, DF_SCHEMA } from \"./dexiewDB\";\nimport Dexie from \"dexie\";\nimport { getTrigramsCount } from \"./tokenizationUtils\";\n/*\n    We need to update the document frequency table when a user adds data. \n    Doing this naively is super slow, so instead, after a file has been uploaded, we'll do an update and then an inserton the df tabke\n*/\n\n\nexport const enqueTermsToBePosted = async (docs) => {\n    // This needs to be run on all docs at the start of a transction. \n    // Then we insert the docs themselves in smaller batches\n    // We can be smart here, and mark anything in the postings table that has been touched as needing an update; \n    let termsToBePosted = {};\n    let t1 = new Date()\n    let t2 = new Date()\n\n    docs.forEach(doc => { //This is super flow and inefficent. \n        const trigramCounts = getTrigramsCount(doc.content)\n        Object.entries(trigramCounts).forEach(([trigram, freq]) => {\n            termsToBePosted[trigram] = termsToBePosted[trigram] || [] // if it doesn't exist make an empty array\n            termsToBePosted[trigram].push({ id: doc.id, freq });\n\n\n        })\n    })\n    t2 = new Date()\n    console.log(`It tokk ${t2 - t1} to make a postings list`);\n    //Now we reshape it into a form that we can insert\n\n    const termsToBePostedArray = Object.entries(termsToBePosted).map(([trigram, docs]) => ({ trigram, docs, newTerm: 1 })); // Mark all as a new term\n    const startTime = new Date();\n    const step = 10000;\n    let r1;\n    for (let i = 0; i <= termsToBePostedArray.length; i += step) {\n        t1 = new Date()\n        r1 = await postingsQueueTable.bulkAdd(termsToBePostedArray.slice(i, i + step))\n        t2 = new Date()\n        console.log(`Inserted ${step} postings in ${t2 - t1} ms. ${termsToBePostedArray.length - i} remaining`)\n    }\n\n    const existingTerms = await postingsTable.where(\"trigram\").anyOf(Object.keys(termsToBePosted)).primaryKeys() // Will only return terms that are in the postings table\n    // Now mark the que table with terms that are not new\n    await postingsQueueTable.where(\"trigram\").anyOf(existingTerms).modify({ newTerm: 0 });\n\n\n}\nexport const addDocsToStore = async (docs) => {\n    let t1 = new Date()\n    await dataTable.bulkAdd(docs);\n    let t2 = new Date()\n\n    const insertDUration = t2 - t1;\n    console.log(`It took ${insertDUration} to insert ${docs.length} docs`)\n    t1 = new Date()\n\n\n\n    const endTime = new Date();\n    // console.log(`Added ${termsToBePosted.length}  in ${endTime-startTime} ms for doc ${docs.length}`)\n    return null;\n\n}\n\nexport const moveNewTermsFromPostingsQueueToPostingsTable = async (db) => {\n    const step = 1000;\n    let collection = postingsQueueTable.where(\"newTerm\").equals(1).limit(step)\n    let terms = await collection.toArray()\n    debugger;\n\n    while (terms.length > 0) {\n        await db.transaction('rw', [DF_SCHEMA, POSTING_QUEUE_SCHEMA, POSTINGS_SCHEMA], async tx => {\n            let t1 = new Date()\n            const insertResults = await postingsTable.bulkAdd(terms)\n            await dfTable.bulkAdd(terms.map(x => ({ trigram: x.trigram, freq: x.docs.length })))\n            await collection.delete()\n            collection = postingsQueueTable.where(\"newTerm\").equals(1).limit(step)\n            terms = await collection.toArray()\n            let t2 = new Date()\n            console.log(`moved ${terms.length} items from postings que`)\n\n        })\n    }\n}\nconst getTermsMap = (terms) => terms.reduce((map, termObj) => {\n    map[termObj.trigram] = termObj\n    return map\n}, {})\n\nconst appendIngLogic = async (db)=>{\n\n}\nexport const appendDocsFromQueueToExistingPostingsItems = async (db) => {\n    //Get the terms that need to be updated\n    const step = 400; //This is low because larger values give an IPC error\n    let collection = postingsQueueTable.where(\"newTerm\").equals(0).limit(step);\n\n    let terms = await collection.toArray()\n    debugger;\n    console.log(`Got ${terms.length} terms to update in postings table`)\n    let termsMap = getTermsMap(terms)\n\n    let termKeys = Object.keys(termsMap);\n\n    console.log(`Term map built`)\n    do {\n        let t1 = new Date()\n            await db.transaction('rw', [DF_SCHEMA, POSTING_QUEUE_SCHEMA, POSTINGS_SCHEMA], async tx => {\n            let collection = postingsQueueTable.where(\"newTerm\").equals(0).limit(step);\n            let terms = await collection.toArray()\n            if (terms.length ===0){\n            }\n            else{\n\n// Linter warns us about something potentially quite bad https://eslint.org/docs/rules/no-loop-func\n            await postingsTable.where(\"trigram\").anyOf(termKeys).modify(posting => {\n                const newDocIds = termsMap[posting.trigram].docs\n                posting.docs = posting.docs.concat(newDocIds);\n            })\n            await dfTable.where(\"trigram\").anyOf(termKeys).modify(df => {\n\n                df.freq = df.freq + termsMap[df.trigram].docs.length\n            })\n\n            await collection.delete()\n         \n\n            }\n        })\n        let t2 = new Date();\n        console.log(`Updated ${step} terms in postings table in ${t2 - t1} ms`)\n    } while( (await postingsQueueTable.where(\"newTerm\").equals(0).count() ) >0)\n\n}","//From https://raw.githubusercontent.com/dfahlander/Dexie.js/master/samples/full-text-search/FullTextSearch.js\n\n/*\n    This example is a simple implementation of full-text search based on multi-valued indexes and Dexie hooks.\n    NOTE: Multi-valued indexes are only supported in Opera, Firefox and Chrome. Does not work with IE so far.\n    To see an example that works with IE, see FullTextSearch2.js.\n*/\nimport Dexie from 'dexie'\nimport { getTrigrams, getTrigramsCount } from './tokenizationUtils';\nimport { searchForTrigrams } from './queryFunctions';\nimport { LABEL_FILTER_OPTIONS } from '../searchContext';\nimport { updateDFTableAfterInsert, addDocsToStore, enqueTermsToBePosted, moveNewTermsFromPostingsQueueToPostingsTable, appendDocsFromQueueToExistingPostingsItems } from './insertionUtils';\nvar hash = require('object-hash');\n\nconst DBNAME = 'DATA'\nexport const DATA_SCHEMA = 'data'\nexport const POSTINGS_SCHEMA = 'positings'\nexport const DF_SCHEMA = 'document_frequency'; // Stores how many documents each trigram appeared in \nexport const POSTING_QUEUE_SCHEMA = 'postings_queue'\nconst CLASS_SCHEMA = 'schema'\nconst QUERY_SCHEMA = 'query'\nvar db = new Dexie(DBNAME);\nconst stores = {}\nstores[POSTINGS_SCHEMA] = \"trigram\" // term,doc_id, maps each token to an object of (docId:freq)\n\nstores[DATA_SCHEMA] = \"id,human_label,model_label,[has_label+id]\" // and content,class\nstores[CLASS_SCHEMA] = \"++id,name\"\nstores[QUERY_SCHEMA] = \"++id,*docIds\"\nstores[DF_SCHEMA] = \"trigram,[trigram+freq]\" // compund index lets us filter and sort for least frequent df\nstores[POSTING_QUEUE_SCHEMA] =\"trigram,added,newTerm\" // Maps each trigram to doc ids that need to be added to the postings list\n\n\n\n\nconst initializeDB = () => {\n    db.version(1).stores(stores);\n    const initializeDataDB = () => {\n\n        // Open database to allow application code using it.\n        db.open();\n\n    }\n    initializeDataDB()\n\n\n}\n\ninitializeDB()\n// Add hooks that will index \"content\" for full-text search:\n\nexport const dataTable = db[DATA_SCHEMA]\nexport const postingsTable = db[POSTINGS_SCHEMA];\nexport const dfTable = db[DF_SCHEMA];\nexport const postingsQueueTable = db[POSTING_QUEUE_SCHEMA];\n\nexport const addData = async (data)=>{\n    await db.transaction('rw',[DATA_SCHEMA,DF_SCHEMA,POSTING_QUEUE_SCHEMA,POSTINGS_SCHEMA],async tx=>{\n\n        //First we enque all the terms to be added to the posting list\n        await enqueTermsToBePosted(data);\n        const step = 10000\n        for (let i=0; i<data.length; i+=step){\n            await addDocsToStore(data.slice(i, i+step))\n        \n        }\n        // Now we can add the actual data\n\n        //Now we update the DF table\n        // return updateDFTableAfterInsert();\n\n        //And then move the queed terms into the postings table\n    });\n\n    //Now a new transaction to move the data into the postings and df table\n        let t1 = new Date()\n        await moveNewTermsFromPostingsQueueToPostingsTable(db)\n        let t2 = new Date ()\n        console.log(`Moved from que to postings table in ${t2-t1} ms`)\n        t1 = new Date()\n        await appendDocsFromQueueToExistingPostingsItems(db);\n        t2 = new Date ()\n        console.log(`Appeneded docs to posting from queue in ${t2-t1} ms`)\n}\n\n\nexport const search = async (query, params) => {\n    let candidateDocIds\n    if (query === undefined || query === null || query.length === 0) {\n        candidateDocIds = await dataTable.toCollection().primaryKeys()\n    } else {\n        const terms = Object.keys(getTrigramsCount(query));\n        candidateDocIds = await searchForTrigrams(terms);\n    }\n    let result\n    switch (params.labelFilter) {\n        case LABEL_FILTER_OPTIONS.ALL:\n            result = dataTable.where(\"id\").anyOf(candidateDocIds)\n            break;\n        case LABEL_FILTER_OPTIONS.LABELED:\n            result = dataTable.where('[has_label+id]').anyOf(candidateDocIds.map(id => [1, id]))\n            break;\n        case LABEL_FILTER_OPTIONS.UNLABELED:\n\n            const idsToExclude = new Set(await dataTable.where('[has_label+id]').anyOf(candidateDocIds.map(id => [1, id])).primaryKeys())\n            const idsToGet = candidateDocIds.filter(x => !idsToExclude.has(x))\n            result = dataTable.where(\"id\").anyOf(idsToGet)\n            break\n\n        default:\n            throw new Error(params.labelFilter)\n    }\n\n    if (query && query.length > 0) {\n        return result.filter(x => x.content.search(query) != -1).primaryKeys()\n    } else {\n        return result.primaryKeys()\n    }\n\n    // Finnaly, filter to find the exact query\n\n\n}\n\nexport const regexSearch = (pattern) => {\n\n    try {\n        //temp try catch block to avoid execptions when partial pattern is sent\n\n\n        const regex = new RegExp(pattern)\n        return db[DATA_SCHEMA].filter(doc => regex.test(doc.content)).primaryKeys()\n            .then(matchingDocumentIds => {\n                const queryCacheObject = {\n                    \"id\": hash(pattern),\n                    docIds: matchingDocumentIds\n                }\n                db[QUERY_SCHEMA].add(queryCacheObject)\n                return matchingDocumentIds\n            })\n    }\n    catch (e) {\n        return Dexie.Promise.resolve([])\n    }\n\n}\n\nexport const first = (n = 20) => {\n    return db[DATA_SCHEMA].limit(100).primaryKeys()\n}\nexport const resetAll = () => {\n    return Dexie.Promise.all([\n        db[DATA_SCHEMA].clear(),\n        db[CLASS_SCHEMA].clear()\n    ])\n}\n\nexport const getDocById = (id) => {\n    return db[DATA_SCHEMA].get(id)\n}\nexport const addSchemaClass = (name, color, ) => {\n\n    return db[CLASS_SCHEMA].add({ name, color })\n}\n\nexport const getSchemaClasses = () => {\n    return db[CLASS_SCHEMA].toArray()\n}\n\nexport const applyClassToExample = (exampleId, className) => {\n    return db[DATA_SCHEMA].update(exampleId, { human_label: className, has_label: 1 })\n}\n\nexport const getExampleCount = () => dataTable.count()","import React from 'react'\nimport * as dbUtils from './dexiewDB'\n\nconst DBContextType = React.createContext(\"dbContext\");\n\nexport const DBContext = (props)=>{\n    const [step,setStep] = React.useState(0)\n    const [ready,setReady] = React.useState(false)\n\n    const incrementStep = ()=>setStep(step+1) // trigger a rerender when modifying the db\n    const init =  ()=>{\n\n        setReady(true)\n    \n    }\n    React.useEffect(init,[1])\n\n    const api = {\n        addDoc: (doc)=>{\n            // dbUtils.addDoc(doc)\n            incrementStep();\n        },\n        addDocsBatch: async (docs)=>{\n            const result = await dbUtils.addData(docs)\n            return result\n        },\n        updateDoc:(doc)=>{\n            // dbUtils.updateDoc(doc)\n            incrementStep();\n        },\n        setDocCLass: (exampleId,className)=>{\n            return dbUtils.applyClassToExample(exampleId,className)\n            \n        },\n        updateDocsBatch:(docs)=>{\n            // for (const doc of docs){\n            //     // dbRef.current.updateDoc(doc)\n            // }\n            incrementStep();\n        },\n        search:  async (query,params)=>{\n            const results = await dbUtils.search(query,params)\n            return  results\n        },\n        regexSearch:  async (pattern,)=>{\n            const results = await dbUtils.regexSearch(pattern)\n            return  results\n        },\n\n        getDocumentById: (id)=>{\n            return dbUtils.getDocById(id)\n        },\n\n        allDocs:()=>{\n\n            return dbUtils.first(20)\n        },\n        step\n\n    }\n    return (\n        <DBContextType.Provider value={api}>\n            {ready ? props.children : null}\n        </DBContextType.Provider>\n    )\n}\n\nexport const useDB = ()=>{\n    const context = React.useContext(DBContextType)\n    return context;\n}","import React from 'react'\nimport { addSchemaClass, getSchemaClasses } from '../db/dexiewDB';\n\nvar randomMC = require('random-material-color');\n\nconst ClassContextType = React.createContext('classContext')\nexport const ClassContext = (props)=>{\n\n\n    const [classes,setClasses] = React.useState({});\n    React.useEffect( ()=>{\n        getSchemaClasses().then(classes=>{\n            setClasses(classes);\n\n        })\n\n    },[1])\n    \n    const addClass = async (name,)=>{\n        const color =randomMC.getColor({text:name});\n        await addSchemaClass(name,color)\n        const classes =await getSchemaClasses()\n        setClasses(classes);\n    }\n\n    return (\n        <ClassContextType.Provider value ={{classes:Object.values(classes),addClass}}>\n            {props.children}\n        </ClassContextType.Provider>\n    )\n}\n\nexport const useClassContext = ()=>{\n    return React.useContext(ClassContextType)\n}","import React from 'react'\nimport { useClassContext } from './classContext';\nimport { Grid, Button,  Dialog, DialogTitle, DialogContent, TextField, DialogActions } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\nimport { useDB } from '../db/dbContext.dexie';\n\nexport const AddClassDialog = (props)=>{\n    const classContext =useClassContext()\n    const [name,setName] = React.useState(null)\n    const [open,setOpen] = React.useState(false);\n\n    return (\n        <React.Fragment>\n            <Add onClick={()=>setOpen(true)}/>\n\n        <Dialog open={open} onClose={()=>setOpen(false)}>\n            <DialogTitle>\n                Add a new class\n            </DialogTitle>\n            <DialogContent>\n                <TextField \n                    onChange={e=>setName(e.target.value)}\n                    value={name}\n                    label=\"Choose a name for your class\"\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button \n                variant=\"contained\" \n                color=\"primary\" \n                disabled={name===null} \n                onClick={()=>{\n                    classContext.addClass(name)\n                    setOpen(false)\n                    setName(null)\n                \n                }}\n                >\n                Add {name}\n                </Button>\n            </DialogActions>\n        </Dialog>\n        </React.Fragment>\n    )\n}\nexport const ClassRibbon = (props)=>{\n    const db = useDB()\n    const classContext =useClassContext()\n    const applyClass =(name)=>{\n        db.setDocCLass(props.example.id,name)\n        .then(props.handleUpdateExample)\n\n    }\n    return(\n    <Grid container spacing={2}>\n        \n        {classContext.classes.map(cls=>(\n            <Grid item>\n            <Button \n                variant={props.example.human_label===cls.name ? \"contained\" : \"outlined\"}\n                onClick={()=>{applyClass(cls.name)}}\n                style={{borderColor:cls.color,background:props.example.human_label===cls.name ? cls.color : undefined}}>\n                {cls.name}\n            </Button>\n            </Grid>\n        ))}\n    </Grid>\n)\n}","import React from 'react'\nimport { Typography, Paper, CardHeader, CardContent, CardActions, CircularProgress } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { ClassRibbon } from '../classes/classRibbon';\nimport { useDB } from '../db/dbContext.dexie';\nconst useStyles = makeStyles(theme => ({\n    root: {\n        overflow: 'auto',\n        marginTop: '1rem'\n    }\n}))\n\nexport const Example = (props) => {\n    const classes = useStyles()\n    const db = useDB()\n    const [example, setExample] = React.useState(null)\n    const [loading, setLoading] = React.useState(false);\n    const loadExample = ()=>{\n\n\n        db.getDocumentById(props.exampleId)\n            .then((example) => {\n                setExample(example);\n                setLoading(false);\n\n                try{\n                    props.onLoad();\n                }\n                catch  {\n                    console.error(\"Node was unmounted before loading\")\n                }\n             \n    })\n}\n    React.useEffect(()=>{\n                setLoading(true)\n        loadExample()\n    }\n        ,[1]);\n\n    if ( example===null ){\n        return (\n        <div style={{height:'50vh'}}>\n        <CircularProgress />\n        </div>\n        )\n        \n    }\n    return (\n        <div>\n            <Paper className={classes.root} id={props.exampleId} style={{ maxHeight: '80vh' }}>\n                <CardHeader\n                    style={{ paddingBottom: '1rem' }}\n                    title={props.exampleId}\n                    subheader={<ClassRibbon example={example} handleUpdateExample={loadExample} />}\n                ></CardHeader>\n                <CardContent style={{ overflow: 'auto', height: '75%' }}>\n                    <Typography style={{ whiteSpace: 'pre-line', }}>\n                        {example.content}\n                    </Typography>\n                </CardContent>\n                <CardActions>\n\n                </CardActions>\n            </Paper>\n        </div>\n    )\n}","/*\n    This is the grossest part of the code. \n    We're solving two problems here\n    1. The number of examples froma  query is unbounded, so we are potentially rendering A LOT of things and that can lead to performance degradation\n    2. The length of the text in each result is unkown and unbounded, but we want don't want the user to have to scroll forever to get through an example. \n\n    We're using react-virtualized to solve both, since that's what it does. It's just very strange for the uninitiated, hence this long comment. \n\n    Basically, RV manages mounting and unmounting compenents for us, so at any given time only a few are actually in the DOM. We use it's CellMeasurer\n    component to figure out how high each example should be. \n\n    When a user is scrolling within a query result, we want to cache the height, so we use it's measure cache, but if the query changes the cache \n    is no longer valid, since it uses the index in the array of examples which changes. To solve that, we memoize the cache based on the example list. \n\n    It's not deep, but it's complex and makes a difference for the user\n*/\nimport React from 'react'\nimport { makeStyles, Grid, Container, CircularProgress, LinearProgress,  } from '@material-ui/core';\nimport { CellMeasurer, CellMeasurerCache, List } from 'react-virtualized';\nimport { Example } from './example';\nimport { useSearch } from '../searchContext';\n  \nconst useStyles = makeStyles(theme => ({\n    root: {\n        '&:focus': {\n            outline: 0\n        },\n\n        '&::-webkit-scrollbar': {\n            display: 'hidden'\n        }\n\n    }\n}))\nexport const ExampleList = (props) => {\n    const [height, setHeight] = React.useState(0);\n    const [width, setWidth] = React.useState(0);\n    const search = useSearch()\n\n    const cache = React.useMemo(()=>{\n        /* This is where we memoize the cache based on the given set of examples */\n        return  new CellMeasurerCache({\n            defaultHeight: 50,\n            fixedWidth: true\n          });\n        \n    },[search.examples])\n    const ref = React.useCallback(node => {\n        if (node !== null && height === 0) {\n            /*\n                Measure the height of the element that contains the list so we know how much space we have\n                TODO - Make this responsive, e.g. if the user resized the screen adjust. \n            */\n            setHeight(node.clientHeight);\n            setWidth(node.clientWidth);\n        }\n    })\n    const exampleIds = search.examples;\n\n\n\n    const exampleRenderer = ({  index, isScrolling, key, parent, style  }) => {\n        /*\n            This function renderes each example in the list. RV calls it when the item is about to come into view\n        */\n        const exampleId = exampleIds[index]\n        return (\n            <CellMeasurer\n            cache={cache}\n            columnIndex={0}\n            key={key}\n            parent={parent}\n            rowIndex={index}\n          >\n            {({ measure }) => ( // Measure is called by the example one it has retreived the example from the DB so that it's size is set\n\n            <Grid item xs={10} style={{ ...style,  }} key={key} >\n                <Example\n                    handleUpdateExample={props.handleUpdateExample}\n                    extraStyle={{ style }}\n                    orderIndex={1}\n                    key={exampleId}\n                    exampleId={exampleId}\n                    anno_source={props.anno_source}\n                    schema={props.schema}\n                    onLoad={measure}\n\n                />\n\n            </Grid>\n            )\n            }\n            </CellMeasurer>\n\n\n        )\n    }\n    const classes = useStyles()\n    if (search.searching){\n        return <LinearProgress />\n    }\n    return (\n        <Container style={{height:'86vh',marginTop:'2rem'}}>\n        <div className={classes.root} style={{ position: 'relative', height: '100%', width:'100%', overflow: 'hidden' }} ref={ref}>\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <List //This is the list of items \n                height={height}\n                deferredMeasurementCache={cache}\n                rowHeight={cache.rowHeight}\n                rowRenderer={exampleRenderer}\n                width={width}\n                rowCount={exampleIds.length}\n            />\n            </Grid>\n        </div>\n        </Container>\n    )\n}\n\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  bigAvatar: {\n    margin: 10,\n    width: 120,\n    height: 60,\n  },\n\n}));\n\nexport const YLabelAppbar =(props) => {\n  const classes = useStyles();\n\n  return (\n      <AppBar position=\"fixed\" className={props.rootClass}>\n\n      \n        <Toolbar>\n\n          <Typography align=\"left\" variant=\"h6\" className={classes.title}>\n            Why Label When You Can Search ? \n          </Typography>\n\n        </Toolbar>\n      </AppBar>\n  );\n}\n","import React from 'react'\nimport {  LinearProgress, FormControl, InputLabel, Input, InputAdornment, IconButton, FormHelperText, SvgIcon, Grid, Typography } from '@material-ui/core';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\n\nimport { useDebouncedCallback } from 'use-debounce';\nimport { useSearch, LABEL_FILTER_OPTIONS } from '../searchContext';\nconst RegexIcon = (props)=>(\n    <SvgIcon {...props}>\n        <g id=\"regular-expression\">\n\t\t<path id=\"left-bracket\" d=\"M3 12.045c0-.99.15-1.915.45-2.777A6.886 6.886 0 0 1 4.764 7H6.23a7.923 7.923 0 0 0-1.25 2.374 8.563 8.563 0 0 0 .007 5.314c.29.85.7 1.622 1.23 2.312h-1.45a6.53 6.53 0 0 1-1.314-2.223 8.126 8.126 0 0 1-.45-2.732\"/>\n\t\t<path id=\"dot\" d=\"M10 16a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"/>\n\t\t<path id=\"star\" d=\"M14.25 7.013l-.24 2.156 2.187-.61.193 1.47-1.992.14 1.307 1.74-1.33.71-.914-1.833-.8 1.822-1.38-.698 1.296-1.74-1.98-.152.23-1.464 2.14.61-.24-2.158h1.534\"/>\n\t\t<path id=\"right-bracket\" d=\"M21 12.045c0 .982-.152 1.896-.457 2.744A6.51 6.51 0 0 1 19.236 17h-1.453a8.017 8.017 0 0 0 1.225-2.31c.29-.855.434-1.74.434-2.66 0-.91-.14-1.797-.422-2.66a7.913 7.913 0 0 0-1.248-2.374h1.465a6.764 6.764 0 0 1 1.313 2.28c.3.86.45 1.782.45 2.764\"/>\n\t</g>\n\n    </SvgIcon>\n)\nexport const SearchBar = (props)=>{\n    const [doRegex,setDoRegex] = React.useState(false)\n    const search = useSearch()\n    const [debouncedCallback] = useDebouncedCallback(\n        // function\n        (query) => {\n            search.handleQueryChange(query,doRegex)\n        },\n        // delay in ms\n        250\n      );\n    \n    return (\n        <Grid container>\n        <Grid item xs={12}>\n        <FormControl >\n        <InputLabel htmlFor=\"searchbar\">Search for something</InputLabel>\n        <Input\n          id=\"searchbar\"\n          type=\"text\"\n          \n          onChange={e=>debouncedCallback(e.target.value)}\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <IconButton aria-label=\"Toggle regex\" onClick={()=>{setDoRegex(!doRegex)}} color={doRegex ? \"primary\" :undefined} >\n                <RegexIcon/>\n              </IconButton>\n            </InputAdornment>\n          }\n        />\n                <FormHelperText id=\"weight-helper-text\">{search.searching ? <LinearProgress /> : \"Runs a full text search on your data\"}</FormHelperText>\n\n      </FormControl>\n      </Grid>\n      <Grid item xs={12} style={{marginTop:'1rem'}}>\n          <ToggleButtonGroup exclusive value={search.labelFilter} onChange={(e,v)=>search.setLabelFilter(v)} size=\"small\">\n          <ToggleButton value={LABEL_FILTER_OPTIONS.ALL} >\n              All\n            </ToggleButton>\n            <ToggleButton value={LABEL_FILTER_OPTIONS.LABELED} size=\"small\">\n              Done\n            </ToggleButton>\n            <ToggleButton value={LABEL_FILTER_OPTIONS.UNLABELED} size=\"small\">\n              Empty\n            </ToggleButton>\n\n          </ToggleButtonGroup>\n        <Grid item xs={12}>\n          <Typography>\n              {search.examples.length} examples in group\n          </Typography>\n        </Grid>\n      </Grid>\n      </Grid>\n\n    )\n}","import React from 'react'\nimport { TextField, Fade, MenuItem,  Button, CircularProgress } from '@material-ui/core';\n\nimport { useDB } from '../../db/dbContext.dexie';\nimport Papa from 'papaparse'\nconst uuid = require('uuid/v4');\nexport function readJSONFileAsync(file) {\n    return new Promise((resolve, reject) => {\n        let reader = new FileReader();\n\n        reader.onload = () => {\n            resolve(reader.result);\n        };\n\n        reader.onerror = reject;\n\n        reader.readAsText(file);\n    })\n}\n\n\nexport const FileInput = (props) => {\n    const handleNewFile = async (e, extra) => {\n        //Todo move this to a webworker (requires ejecting https://github.com/developit/workerize-loader/issues/35)\n        const file = e.target.files[0]\n        const contents = await readJSONFileAsync(file);\n        if (file.name.endsWith('.json')){\n            const data = JSON.parse(contents);\n            props.handleNewData(data);\n    \n        }else{\n            const data = Papa.parse(contents,{\n                header:true\n            }).data;\n            props.handleNewData(data);\n        }\n    }\n    return (\n        <TextField\n            type=\"file\"\n            label=\"Add a file\"\n            onChange={handleNewFile}\n            helperText=\"Select a file\"\n        />\n    )\n}\n\n\nexport const DataIngestor = (props) => {\n    const [data, setData] = React.useState(null)\n    const [keys, setKeys] = React.useState([]);\n    const [textField, setTextField] = React.useState(null)\n    const [loading,setLoading] = React.useState(false)\n    const db = useDB()\n    const handleNewData = (data) => {\n        setKeys(Object.keys(data[0]));\n        setData(data);\n    }\n\n    const handleSubmit = () => {\n        setLoading(true)\n        const formtedData = data.map((x, id) => ({\n            content: x[textField],\n            id:uuid()\n        }))\n        db.addDocsBatch(formtedData)\n        .then(()=>setLoading(false))\n        ;\n    }\n    return (\n        <form>\n            <FileInput handleNewData={handleNewData} />\n            <Fade in={keys.length}>\n                <TextField\n                    onChange={e => setTextField(e.target.value)}\n                    value={textField}\n\n                    select\n                    label=\"Text Field\"\n                    helperText=\"Please select the field in the data we'll be labeling\"\n                    margin=\"normal\"\n                >\n\n                    {keys.map(x => (\n                        <MenuItem value={x}>{x}</MenuItem>\n                    ))}\n                </TextField>\n            </Fade>\n            {loading ? <CircularProgress /> : \n            <Button\n                onClick={handleSubmit}\n                disabled={textField === null}\n                variant=\"outlined\"\n                color=\"primary\"\n            >\n                Load Data\n                </Button>\n            }\n        </form>\n    )\n}","import React from 'react'\nimport { DialogTitle, Dialog, DialogContent, IconButton,  } from '@material-ui/core';\nimport { DataIngestor } from './fileInput';\nimport { Add } from '@material-ui/icons';\nexport const DataInputDialog = (props) => {\n\n    const [open, setOpen] = React.useState(false);\n    return (\n        <React.Fragment>\n            <IconButton color=\"inherit\" onClick={() => setOpen(true)}>\n                <Add />\n            </IconButton>\n            <Dialog open={open} onClose={() => setOpen(false)}>\n                <DialogTitle>Add some data</DialogTitle>\n                <DialogContent>\n                    <DataIngestor />\n                </DialogContent>\n            </Dialog>\n        </React.Fragment>\n    )\n}","import React from 'react'\nimport {  DialogTitle, Dialog, DialogActions, Button, CircularProgress, IconButton } from '@material-ui/core';\nimport { DeleteForever } from '@material-ui/icons';\nimport { resetAll } from '../../db/dexiewDB';\nexport const ResetDBModal =(props)=>{\n    const [open,setOpen] = React.useState(false);\n    const [erasing,setErasing] = React.useState(false)\n    const handleClick = async ()=>{\n        setErasing(true)\n        await resetAll();\n        setOpen(false)\n        setErasing(false)\n    }\n    return (\n        <React.Fragment>\n            <IconButton\n            color='inherit'\n                onClick={()=>setOpen(true)}\n            ><DeleteForever/></IconButton>\n\n            <Dialog open={open} onClose={()=>setOpen(false)}>\n                <DialogTitle>\n                    Erase all the data\n            </DialogTitle>\n            <DialogActions>\n            { erasing ? <CircularProgress /> :\n             <Button onClick={handleClick} variant=\"contained\" color=\"danger\">Yes Erase It</Button> \n            }\n            </DialogActions>\n            </Dialog>\n\n        </React.Fragment>\n    )\n}","import React from 'react'\nimport { List, ListItem, ListItemIcon, ListItemText, Collapse } from '@material-ui/core';\nimport { Save, ExpandLess, ExpandMore,  } from '@material-ui/icons';\nimport { DataInputDialog } from '../data/components/input/inputDialog';\nimport { ResetDBModal } from '../data/components/input/resetDBModal';\nimport { AddClassDialog } from '../data/classes/classRibbon';\nconst DataItems = (props) => {\n    const [open, setOpen] = React.useState(true)\n    return (\n        <React.Fragment>\n            <ListItem button key={\"Data\"} onClick={() => setOpen(!open)}>\n                <ListItemIcon> <Save /></ListItemIcon>\n                <ListItemText primary={\"Data\"} />\n                {open ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={open} timeoute=\"auto\" unmountOnExit>\n                <List>\n                    <ListItem>\n                        <ListItemIcon>\n                            <DataInputDialog />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Add More Data\" />\n                    </ListItem>\n                    <ListItem>\n                        <ListItemIcon>\n                            <ResetDBModal />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Delete All Data\" />\n                    </ListItem>\n\n                </List>\n            </Collapse>\n        </React.Fragment>\n    )\n}\nexport const DrawerItems = (props) => {\n\n    return (\n        <List>\n            <DataItems />\n            <ListItem button>\n                <ListItemIcon>\n                    < AddClassDialog />\n                </ListItemIcon>\n                <ListItemText primary=\"Classes\" />\n            </ListItem>\n\n        </List>\n    )\n\n}","import React from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { YLabelAppbar } from './Appbar';\nimport { SearchBar } from '../data/components/searchBar';\nimport { CardMedia } from '@material-ui/core';\nimport { DrawerItems } from './drawerItems';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    marginLeft: drawerWidth,\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport const  ResponsiveDrawer = (props) => {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen);\n  }\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} >\n      <CardMedia\n      style={{paddingTop:'25%'}}\n        image={process.env.PUBLIC_URL + '/img/logo.png'}\n      />\n\n      </div>\n      \n\n      <Divider />\n      <List>\n      \n          <ListItem >\n            <SearchBar />\n          </ListItem>\n      \n      </List>\n      <Divider />\n      <DrawerItems />\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n        <YLabelAppbar handleDrawerToggle={handleDrawerToggle} rootClass={classes.appBar}/>\n      <nav className={classes.drawer} aria-label=\"Mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n            {props.children}\n      </main>\n    </div>\n\n)\n        }","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Container,} from '@material-ui/core'\nimport { DBContext } from './data/db/dbContext.dexie';\nimport { ExampleList, } from './data/components/exampleList';\nimport { ClassContext } from './data/classes/classContext';\nimport { SearchContext } from './data/searchContext';\nimport { ResponsiveDrawer } from './layout/drawer';\n\n\nfunction App() {\n\n  return (\n    <React.Fragment>\n      \n      <ClassContext>\n      <DBContext>\n        <SearchContext>\n      \n            <CssBaseline />\n            <ResponsiveDrawer >\n            <Container>\n\n            \n            \n            <ExampleList />\n            </Container>\n            </ResponsiveDrawer>\n            </SearchContext>\n        </DBContext>\n      </ClassContext>\n      \n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}